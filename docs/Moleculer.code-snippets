{
	"moleculer-service": {
		"prefix": "mol-svc",
		"description": "Moleculer service",
		"body": [
			"\"use strict\";",
			"",
			"module.exports = {",
			"    name: \"$1\",",
			"",
			"    /**",
			"     * Service settings",
			"     */",
			"    settings: {",
			"",
			"    },",
			"",
			"    /**",
			"     * Service metadata",
			"     */",
			"    metadata: {",
			"",
			"    },",
			"",
			"    /**",
			"     * Service dependencies",
			"     */",
			"    dependencies: [],",
			"",
			"    /**",
			"     * Actions",
			"     */",
			"    actions: {",
			"",
			"    },",
			"",
			"    /**",
			"     * Events",
			"     */",
			"    events: {",
			"",
			"    },",
			"",
			"    /**",
			"     * Methods",
			"     */",
			"    methods: {",
			"",
			"    },",
			"",
			"    /**",
			"     * Service created lifecycle event handler",
			"     */",
			"    created() {",
			"",
			"    },",
			"",
			"    /**",
			"     * Service started lifecycle event handler",
			"     */",
			"    started() {",
			"",
			"    },",
			"",
			"    /**",
			"     * Service stopped lifecycle event handler",
			"     */",
			"    stopped() {",
			"",
			"    }",
			"};",
		]
	},
	"moleculer-action": {
		"prefix": "mol-action",
		"description": "Moleculer service action",
		"body": [
			"$1: {",
			"    cache: false,",
			"    params: {},",
			"    handler(ctx) {",
			"        return $2;",
			"    }",
			"}",
		]
	},
	"moleculer-event": {
		"prefix": "mol-event",
		"description": "Moleculer service event",
		"body": [
			"\"$1\"(payload, sender, eventName) {",
			"    $2",
			"}",
		]
	},
	"moleculer-broker": {
		"prefix": "mol-broker",
		"description": "Moleculer create ServiceBroker",
		"body": [
			"const broker = new ServiceBroker({",
			"    namespace: \"$1\",",
			"    nodeID: null,",
			"",
			"    logger: true,",
			"    logLevel: \"info\",",
			"",
			"    transporter: \"NATS\",",
			"});",
		]
	},
	"moleculer-unit-test": {
		"prefix": "mol-unit",
		"description": "Unit test for Moleculer service",
		"body": [
			"const { ServiceBroker } = require(\"moleculer\");",
			"const TestService = require(\"../../services/$1.service\");",
			"",
			"describe(\"Test '$1' service\", () => {",
			"    let broker = new ServiceBroker();",
			"    broker.createService(TestService);",
			"",
			"    beforeAll(() => broker.start());",
			"    afterAll(() => broker.stop());",
			"",
			"    describe(\"Test '$1.hello' action\", () => {",
			"",
			"        it(\"should return with 'Hello Moleculer'\", () => {",
			"            return expect(broker.call(\"$1.hello\")).resolves.toBe(\"Hello Moleculer\");",
			"        });",
			"",
			"    });",
			"",
			"});",
			"",
		]
	},
	"moleculer-middleware": {
		"prefix": "mol-mw",
		"description": "Moleculer middleware",
		"body": [
			"module.exports = {",
			"    ",
			"    // After broker is created",
			"    created(broker) {",
			"",
			"    },",
			"",
			"    // Wrap local action handlers (legacy middleware handler)",
			"    localAction(handler, action) {",
			"        // If this feature enabled",
			"        if ($1true) {",
			"            return function myMiddleware(ctx) {",
			"                // Do something before",
			"                $2",
			"                // Call the handler",
			"                return handler(ctx).then(res => {",
			"                    // Do something after...",
			"                    $3",
			"                    return res;",
			"                }).catch(err => {",
			"                    // Do something when error occurred,,,",
			"                    $4",
			"                    return this.Promise.reject(err);",
			"                });",
			"            }.bind(this);",
			"        }",
			"",
			"        // Return original handler, because feature is disabled",
			"        return handler;",
			"    },",
			"",
			"    // Wrap remote action handlers",
			"    remoteAction(handler, action) {",
			"",
			"    },",
			"",
			"    // Wrap local event handlers",
			"    localEvent(handler, event) {",
			"",
			"    },",
			"",
			"    // Wrap broker.createService method",
			"    createService(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.destroyService method",
			"    destroyService(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.call method",
			"    call(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.mcall method",
			"    mcall(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.emit method",
			"    emit(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.broadcast method",
			"    broadcast(next) {",
			"",
			"    },",
			"",
			"    // Wrap broker.broadcastLocal method",
			"    broadcastLocal(next) {",
			"",
			"    },",
			"",
			"    // After a new local service created",
			"    serviceCreated(service) {",
			"",
			"    },",
			"",
			"    // Before a local service started",
			"    serviceStarting(service) {",
			"",
			"    },",
			"",
			"    // After a local service started",
			"    serviceStarted(service) {",
			"",
			"    },",
			"",
			"    // Before a local service stopping",
			"    serviceStopping(service) {",
			"",
			"    },",
			"",
			"    // After a local service stopped",
			"    serviceStopped(service) {",
			"",
			"    },",
			"",
			"    // Before broker starting",
			"    starting(broker) {",
			"",
			"    },",
			"",
			"    // After broker started",
			"    started(broker) {",
			"",
			"    },",
			"",
			"    // Before broker stopping",
			"    stopping(broker) {",
			"",
			"    },",
			"",
			"    // After broker stopped",
			"    stopped(broker) {",
			"",
			"    },",
			"",
			"};",
		]
	}
}
